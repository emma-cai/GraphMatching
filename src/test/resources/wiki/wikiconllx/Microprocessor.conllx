The collection of instructions is implemented as bit patterns, each one of which has a different meaning when loaded into the instruction register.
1	The	_	DET	DT	_	2	det	_	_
2	collection	_	NOUN	NN	_	5	nsubj	_	_
3	of	_	ADP	IN	_	2	prep	_	_
4	instructions	_	NOUN	NNS	_	3	pobj	_	_
5	is	_	AUX	VBZ	_	0	root	_	_
6	implemented	_	VERB	VBN	_	5	dep	_	_
7	as	_	ADP	IN	_	6	prep	_	_
8	bit	_	NOUN	NN	_	9	nn	_	_
9	patterns	_	NOUN	NNS	_	7	pobj	_	_
10	,	_	PUNCT	,	_	6	punct	_	_
11	each	_	DET	DT	_	6	dobj	_	_
12	one	_	NUM	CD	_	15	nsubj	_	_
13	of	_	ADP	IN	_	12	prep	_	_
14	which	_	DET	WDT	_	13	pobj	_	_
15	has	_	VERB	VBZ	_	11	rcmod	_	_
16	a	_	DET	DT	_	18	det	_	_
17	different	_	ADJ	JJ	_	18	amod	_	_
18	meaning	_	NOUN	NN	_	15	dobj	_	_
19	when	_	ADV	WRB	_	24	advmod	_	_
20	loaded	_	VERB	VBN	_	24	csubj	_	_
21	into	_	ADP	IN	_	20	prep	_	_
22	the	_	DET	DT	_	23	det	_	_
23	instruction	_	NOUN	NN	_	21	pobj	_	_
24	register	_	VERB	VBP	_	18	rcmod	_	_
25	.	_	PUNCT	.	_	5	punct	_	_

Humans are not particularly good at remembering bit patterns, so a set of short words are defined to represent the different bit patterns.
1	Humans	_	NOUN	NNS	_	2	nsubj	_	_
2	are	_	VERB	VBP	_	0	root	_	_
3	not	_	PART	RB	_	2	neg	_	_
4	particularly	_	ADV	RB	_	5	advmod	_	_
5	good	_	ADJ	JJ	_	2	acomp	_	_
6	at	_	ADP	IN	_	5	prep	_	_
7	remembering	_	VERB	VBG	_	6	pcomp	_	_
8	bit	_	NOUN	NN	_	9	nn	_	_
9	patterns	_	NOUN	NNS	_	7	dobj	_	_
10	,	_	PUNCT	,	_	2	punct	_	_
11	so	_	ADP	IN	_	2	dep	_	_
12	a	_	DET	DT	_	13	det	_	_
13	set	_	NOUN	NN	_	18	nsubjpass	_	_
14	of	_	ADP	IN	_	13	prep	_	_
15	short	_	ADJ	JJ	_	16	amod	_	_
16	words	_	NOUN	NNS	_	14	pobj	_	_
17	are	_	AUX	VBP	_	18	auxpass	_	_
18	defined	_	VERB	VBN	_	2	parataxis	_	_
19	to	_	PART	TO	_	20	aux	_	_
20	represent	_	VERB	VB	_	18	xcomp	_	_
21	the	_	DET	DT	_	24	det	_	_
22	different	_	ADJ	JJ	_	24	amod	_	_
23	bit	_	NOUN	NN	_	24	nn	_	_
24	patterns	_	NOUN	NNS	_	20	dobj	_	_
25	.	_	PUNCT	.	_	2	punct	_	_

The instruction decoder needs to turn each of the opcodes into a set of signals that drive the different components inside the microprocessor.
1	The	_	DET	DT	_	3	det	_	_
2	instruction	_	NOUN	NN	_	3	nn	_	_
3	decoder	_	NOUN	NN	_	4	nsubj	_	_
4	needs	_	VERB	VBZ	_	0	root	_	_
5	to	_	PART	TO	_	6	aux	_	_
6	turn	_	VERB	VB	_	4	xcomp	_	_
7	each	_	DET	DT	_	6	dobj	_	_
8	of	_	ADP	IN	_	7	prep	_	_
9	the	_	DET	DT	_	10	det	_	_
10	opcodes	_	NOUN	NNS	_	8	pobj	_	_
11	into	_	ADP	IN	_	6	prep	_	_
12	a	_	DET	DT	_	13	det	_	_
13	set	_	NOUN	NN	_	11	pobj	_	_
14	of	_	ADP	IN	_	13	prep	_	_
15	signals	_	NOUN	NNS	_	14	pobj	_	_
16	that	_	DET	WDT	_	17	nsubj	_	_
17	drive	_	VERB	VBP	_	15	rcmod	_	_
18	the	_	DET	DT	_	20	det	_	_
19	different	_	ADJ	JJ	_	20	amod	_	_
20	components	_	NOUN	NNS	_	17	dobj	_	_
21	inside	_	ADP	IN	_	20	prep	_	_
22	the	_	DET	DT	_	23	det	_	_
23	microprocessor	_	NOUN	NN	_	21	pobj	_	_
24	.	_	PUNCT	.	_	4	punct	_	_

This collection of words is called the assembly language of the processor.
1	This	_	DET	DT	_	2	det	_	_
2	collection	_	NOUN	NN	_	6	nsubjpass	_	_
3	of	_	ADP	IN	_	2	prep	_	_
4	words	_	NOUN	NNS	_	3	pobj	_	_
5	is	_	AUX	VBZ	_	6	auxpass	_	_
6	called	_	VERB	VBN	_	0	root	_	_
7	the	_	DET	DT	_	9	det	_	_
8	assembly	_	NOUN	NN	_	9	nn	_	_
9	language	_	NOUN	NN	_	6	dobj	_	_
10	of	_	ADP	IN	_	9	prep	_	_
11	the	_	DET	DT	_	12	det	_	_
12	processor	_	NOUN	NN	_	10	pobj	_	_
13	.	_	PUNCT	.	_	6	punct	_	_

An assembler can translate the words into their bit patterns very easily, and then the output of the assembler is placed in memory for the microprocessor to execute.
1	An	_	DET	DT	_	2	det	_	_
2	assembler	_	NOUN	NN	_	4	nsubj	_	_
3	can	_	AUX	MD	_	4	aux	_	_
4	translate	_	VERB	VB	_	0	root	_	_
5	the	_	DET	DT	_	6	det	_	_
6	words	_	NOUN	NNS	_	4	dobj	_	_
7	into	_	ADP	IN	_	4	prep	_	_
8	their	_	PRON	PRP$	_	10	poss	_	_
9	bit	_	NOUN	NN	_	10	nn	_	_
10	patterns	_	NOUN	NNS	_	7	pobj	_	_
11	very	_	ADV	RB	_	12	advmod	_	_
12	easily	_	ADV	RB	_	4	advmod	_	_
13	,	_	PUNCT	,	_	4	punct	_	_
14	and	_	CONJ	CC	_	4	cc	_	_
15	then	_	ADV	RB	_	22	advmod	_	_
16	the	_	DET	DT	_	17	det	_	_
17	output	_	NOUN	NN	_	22	nsubjpass	_	_
18	of	_	ADP	IN	_	17	prep	_	_
19	the	_	DET	DT	_	20	det	_	_
20	assembler	_	NOUN	NN	_	18	pobj	_	_
21	is	_	AUX	VBZ	_	22	auxpass	_	_
22	placed	_	VERB	VBN	_	4	conj	_	_
23	in	_	ADP	IN	_	22	prep	_	_
24	memory	_	NOUN	NN	_	23	pobj	_	_
25	for	_	ADP	IN	_	24	prep	_	_
26	the	_	DET	DT	_	27	det	_	_
27	microprocessor	_	NOUN	NN	_	25	pobj	_	_
28	to	_	PART	TO	_	29	aux	_	_
29	execute	_	VERB	VB	_	22	xcomp	_	_
30	.	_	PUNCT	.	_	4	punct	_	_

Even the incredibly simple microprocessor will have a fairly large set of instructions that it can perform.
1	Even	_	ADV	RB	_	5	advmod	_	_
2	the	_	DET	DT	_	5	det	_	_
3	incredibly	_	ADV	RB	_	4	advmod	_	_
4	simple	_	ADJ	JJ	_	5	amod	_	_
5	microprocessor	_	NOUN	NN	_	7	nsubj	_	_
6	will	_	AUX	MD	_	7	aux	_	_
7	have	_	VERB	VB	_	0	root	_	_
8	a	_	DET	DT	_	11	det	_	_
9	fairly	_	ADV	RB	_	10	advmod	_	_
10	large	_	ADJ	JJ	_	11	amod	_	_
11	set	_	NOUN	NN	_	7	dobj	_	_
12	of	_	ADP	IN	_	11	prep	_	_
13	instructions	_	NOUN	NNS	_	12	pobj	_	_
14	that	_	SCONJ	IN	_	17	mark	_	_
15	it	_	PRON	PRP	_	17	nsubj	_	_
16	can	_	AUX	MD	_	17	aux	_	_
17	perform	_	VERB	VB	_	7	ccomp	_	_
18	.	_	PUNCT	.	_	7	punct	_	_

